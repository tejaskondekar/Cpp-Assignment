				31st jan Assignments

Name: Tejas Kondekar
Roll No 200240520106


Question 1:

public class ReverseArray {  
    public static void main(String[] args) {      
          
        
        int [] arr = new int [] {1, 2, 3, 4, 5};   
          
        System.out.println("Original array: ");  
        for (int i = 0; i < arr.length; i++) {   
            System.out.print(arr[i] + " ");   
        }    
          
        System.out.println();  
          
        System.out.println("Array in reverse order: ");  
       
        for (int i = arr.length-1; i >= 0; i--) {   
            System.out.print(arr[i] + " ");   
        }    
    }  
}  


Question 2:

int getresult(int arr[], int n){
   int min=0,max=0;
   
   if (n == 1)
      { min=max=arr[0]; }
   
   if (arr[0] > arr[1]){
      max = arr[0];
      min = arr[1];
   }
   else{
      max = arr[1];
      min = arr[0];
   }
   for (int i = 2; i<n; i++){
      if (arr[i] > max)
         max = arr[i];
      else if (arr[i] < min)
         min = arr[i];
   }
   printf(" Minimum element: %d", min);
   printf(" Maximum element: %d", max);
}

int main(){
   int arr[] = {200, 191, 112, -11, 330, 60};
   int n = 6;
   getresult (arr, n);
}


Question 3:

using namespace std; 
  
int kthSmallest(int arr[], int n, int k) 
{ 
    
    sort(arr, arr + n); 
  
    
    return arr[k - 1]; 
} 
  
// Driver program to test above methods 
int main() 
{ 
    int arr[] = { 12, 3, 5, 7, 19 }; 
    int n = sizeof(arr) / sizeof(arr[0]), k = 2; 
    cout << "K'th smallest element is " << kthSmallest(arr, n, k); 
    return 0; 
} 


Question 4:

#include <bits/stdc++.h> 
using namespace std; 
  

void sort012(int a[], int arr_size) 
{ 
    int lo = 0; 
    int hi = arr_size - 1; 
    int mid = 0; 
  
    // Iterate till all the elements 
    // are sorted 
    while (mid <= hi) { 
        switch (a[mid]) { 
  
        // If the element is 0 
        case 0: 
            swap(a[lo++], a[mid++]); 
            break; 
  
        // If the element is 1 . 
        case 1: 
            mid++; 
            break; 
  
        // If the element is 2 
        case 2: 
            swap(a[mid], a[hi--]); 
            break; 
        } 
    } 
} 
  
void printArray(int arr[], int arr_size) 
{ 
    // Iterate and print every element 
    for (int i = 0; i < arr_size; i++) 
        cout << arr[i] << " "; 
} 
  
// Driver Code 
int main() 
{ 
    int arr[] = { 0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1 }; 
    int n = sizeof(arr) / sizeof(arr[0]); 
  
    sort012(arr, n); 
  
    cout << "array after segregation "; 
  
    printArray(arr, n); 
  
    return 0; 
} 
 

  
Question 6

#include <bits/stdc++.h> 
using namespace std; 
  

void leftRotatebyOne(int arr[], int n) 
{ 
    int temp = arr[0], i; 
    for (i = 0; i < n - 1; i++) 
        arr[i] = arr[i + 1]; 
  
    arr[i] = temp; 
} 
  
void printArray(int arr[], int n) 
{ 
    for (int i = 0; i < n; i++) 
        cout << arr[i] << " "; 
} 
  
int main() 
{ 
    int arr[] = { 1, 2, 3, 4, 5, 6, 7 }; 
    int n = sizeof(arr) / sizeof(arr[0]); 
  
    // Function calling 
    leftRotate(arr, 2, n); 
    printArray(arr, n); 
  
    return 0; 
} 


Question:7

#include<iostream>
using namespace std;

int maxSum( int arr[], int n) {
   int tempMax = arr[0];
   int currentMax = tempMax;

   for (int i = 1; i < n; i++ ) { //find the max value
      currentMax = max(arr[i], currentMax+arr[i]);
      tempMax = max(tempMax, currentMax);
   }
   return tempMax;
}

int main() {
   int arr[] = {-2, -3, 4, -1, -2, 1, 5, -3};
   int n = 8;
   cout << "Maximum Sum of the Sub-array is: "<< maxSum( arr, n );
}


Question:8

#include<iostream>
#include<algorithm>
using namespace std;
int getMinimizeHeights(int arr[], int n, int k)
{
    if (n == 1)
        return 0;
    sort(arr, arr+n);
    int diff = arr[n-1] - arr[0];
    int minimum = arr[0] + k;
    int maximum = arr[n-1] - k;
    int temp = 0;
    if (minimum > maximum)
    {
        temp = minimum;
        minimum = maximum;
        maximum = temp;
    }
    for (int i = 1; i < n-1; i ++)
    {
        int difference = arr[i] - k;
        int sum = arr[i] + k;
        if (difference >= minimum || sum <= maximum)
            continue;
        if (maximum - difference <= sum - minimum)
            minimum = difference;
        else
            maximum = sum;
    }
    return min(diff, maximum - minimum);
}
int main()
{
    int arr[] = {7,12,3};
    int n = sizeof(arr)/sizeof(arr[0]);
    int k = 8;
    cout << getMinimizeHeights(arr, n, k);
    return 0;
}


Question : 9

void mergeArrays(int arr1[], int arr2[], int n1, 
                             int n2, int arr3[]) 
{ 
    int i = 0, j = 0, k = 0; 
  
    // Traverse both array 
    while (i<n1 && j <n2) 
    { 
        // Check if current element of first 
        // array is smaller than current element 
        // of second array. If yes, store first 
        // array element and increment first array 
        // index. Otherwise do same with second array 
        if (arr1[i] < arr2[j]) 
            arr3[k++] = arr1[i++]; 
        else
            arr3[k++] = arr2[j++]; 
    } 
  
    // Store remaining elements of first array 
    while (i < n1) 
        arr3[k++] = arr1[i++]; 
  
    // Store remaining elements of second array 
    while (j < n2) 
        arr3[k++] = arr2[j++]; 
} 
  
// Driver code 
int main() 
{ 
    int arr1[] = {1, 3, 5, 7}; 
    int n1 = sizeof(arr1) / sizeof(arr1[0]); 
  
    int arr2[] = {2, 4, 6, 8}; 
    int n2 = sizeof(arr2) / sizeof(arr2[0]); 
  
    int arr3[n1+n2]; 
    mergeArrays(arr1, arr2, n1, n2, arr3); 
  
    cout << "Array after merging" <<endl; 
    for (int i=0; i < n1+n2; i++) 
        cout << arr3[i] << " "; 
  
    return 0; 
} 

Question: 10

#include <bits/stdc++.h> 
using namespace std; 
  
void findCommon(int ar1[], int ar2[], int ar3[], int n1, int n2, int n3) 
{ 
    // Initialize starting indexes for ar1[], ar2[] and ar3[] 
    int i = 0, j = 0, k = 0; 
  
    
    while (i < n1 && j < n2 && k < n3) 
    { 
         // If x = y and y = z, print any of them and move ahead  
         // in all arrays 
         if (ar1[i] == ar2[j] && ar2[j] == ar3[k]) 
         {   cout << ar1[i] << " ";   i++; j++; k++; } 
  
         // x < y 
         else if (ar1[i] < ar2[j]) 
             i++; 
  
         // y < z 
         else if (ar2[j] < ar3[k]) 
             j++; 
  
         // We reach here when x > y and z < y, i.e., z is smallest 
         else
             k++; 
    } 
} 

int main() 
{ 
    int ar1[] = {1, 5, 10, 20, 40, 80}; 
    int ar2[] = {6, 7, 20, 80, 100}; 
    int ar3[] = {3, 4, 15, 20, 30, 70, 80, 120}; 
    int n1 = sizeof(ar1)/sizeof(ar1[0]); 
    int n2 = sizeof(ar2)/sizeof(ar2[0]); 
    int n3 = sizeof(ar3)/sizeof(ar3[0]); 
  
    cout << "Common Elements are "; 
    findCommon(ar1, ar2, ar3, n1, n2, n3); 
    return 0; 
} 

Question 11

#include <iostream>
#include <vector>
using namespace std;

int main()
{
    int kases;
    cin >> kases;
    int kase;
    for(kase = 1; kase <= kases; kase++) {
        int  N;
        cin >> N;
        vector result;
        result.push_back(1);
        int temp, carry = 0;
        for(int i = 2; i <= N; i++) {
            for(int j = 0; j < result.size(); j++) {
                temp = carry + result[j] * i;
                carry = temp / 10;
                result[j] = temp % 10;
            }
            while(carry) {
                result.push_back(carry % 10);
                carry /= 10;
            }
        }
        for(int i = result.size() - 1; i >= 0; i--){
            cout << result[i];
        }
        cout << endl;
    }
    return 0;
}

Question : 13

#include <bits/stdc++.h>
using namespace std;
 
int findLongestConseqSubseq(int arr[], int n)
{
    int ans = 0, count = 0;
 
    // sort the array
    sort(arr, arr + n);
 
    vector<int> v;
    v.push_back(arr[0]);
 
    
    for (int i = 1; i < n; i++) 
    {
        if (arr[i] != arr[i - 1])
            v.push_back(arr[i]);
    }
    
    for (int i = 0; i < v.size(); i++) 
    {
         
        if (i > 0 && v[i] == v[i - 1] + 1)
            count++;
        // reset the count
        else
            count = 1;
 
        // update the maximum
        ans = max(ans, count);
    }
    return ans;
}
 
int main()
{
    int arr[] = { 1, 2, 2, 3 };
    int n = sizeof arr / sizeof arr[0];
    cout << "Length of the Longest contiguous subsequence "
            "is "
         << findLongestConseqSubseq(arr, n);
    return 0;
}


Question 14


#include<bits/stdc++.h>

bool isSubset(int arr1[], int arr2[],
int m, int n)
{
int i = 0;
int j = 0;
for (i = 0; i < n; i++)
{
for (j = 0; j < m; j++)
{
if(arr2[i] == arr1[j])
break;
}

if (j == m)
return 0;
}

return 1;
}

int main()
{
int m,n;
printf(“\nEnter the size of array 1 : “);
scanf(“%d”, &m);
printf(“\nEnter the size of array 2 : “);
scanf(“%d”, &n);
int arr1[m],arr2[n];
int i;
printf(“\nEnter the array 1 elements : “);
for(i=0;i<m;i++)
{
scanf(“%d”,&arr1[i]);
}
printf(“\nEnter the array 2 elements : “);
for(i=0;i<n;i++)
{
scanf(“%d”,&arr2[i]);
}

if(isSubset(arr1, arr2, m, n))
printf(“\nArray2 is a subset of Array1\n “);
else
printf(“\nArray2 is not a subset of Array1\n”);

getchar();
return 0;
}


Question 15

#include<bits/stdc++.h> 
using namespace std; 
  

int findMinDiff(int arr[], int n, int m) 
{ 
    
    if (m==0 || n==0) 
        return 0; 
  
    // Sort the given packets 
    sort(arr, arr+n); 
  
   
    if (n < m) 
       return -1; 
  
   
    int min_diff = INT_MAX; 
  
    
    int first = 0, last = 0; 
    for (int i=0; i+m-1<n; i++) 
    { 
        int diff = arr[i+m-1] - arr[i]; 
        if (diff < min_diff) 
        { 
            min_diff = diff; 
            first = i; 
            last = i + m - 1; 
        } 
    } 
    return (arr[last] - arr[first]); 
} 
  
int main() 
{ 
    int arr[] = {12, 4, 7, 9, 2, 23, 25, 41, 
                 30, 40, 28, 42, 30, 44, 48, 
                 43, 50}; 
    int m = 7;  // Number of students 
    int n = sizeof(arr)/sizeof(arr[0]); 
    cout << "Minimum difference is "
         << findMinDiff(arr, n, m); 
    return 0; 
} 

Question: 16


class SmallestSubArraySum 
{ 
   
    static int smallestSubWithSum(int arr[], int n, int x) 
    { 
       
        int min_len = n + 1; 
  
      
        for (int start = 0; start < n; start++) 
        { 
         
            int curr_sum = arr[start]; 
  
           
            if (curr_sum > x) 
                return 1; 
  
           
            for (int end = start + 1; end < n; end++) 
            { 
               
                curr_sum += arr[end]; 
  
               
                if (curr_sum > x && (end - start + 1) < min_len) 
                    min_len = (end - start + 1); 
            } 
        } 
        return min_len; 
    } 
  
  
    public static void main(String[] args) 
    { 
        int arr1[] = {1, 4, 45, 6, 10, 19}; 
        int x = 51; 
        int n1 = arr1.length; 
        int res1 = smallestSubWithSum(arr1, n1, x); 
        if (res1 == n1+1) 
           System.out.println("Not Possible"); 
        else
           System.out.println(res1); 
  
  
        int arr2[] = {1, 10, 5, 2, 7}; 
        int n2 = arr2.length; 
        x = 9; 
        int res2 = smallestSubWithSum(arr2, n2, x); 
        if (res2 == n2+1) 
           System.out.println("Not Possible"); 
        else
           System.out.println(res2); 
  
        int arr3[] = {1, 11, 100, 1, 0, 200, 3, 2, 1, 250}; 
        int n3 = arr3.length; 
        x = 280; 
        int res3 = smallestSubWithSum(arr3, n3, x); 
        if (res3 == n3+1) 
           System.out.println("Not Possible"); 
        else
           System.out.println(res3); 
    } 
} 
  
Question 17

#include<iostream> 
using namespace std; 
  

void threeWayPartition(int arr[], int n, 
                int lowVal, int highVal) 
{ 
 
    int start = 0, end = n-1; 
  
  
    for (int i=0; i<=end;) 
    { 
        // If current element is smaller than 
        // range, put it on next available smaller 
        // position. 
        if (arr[i] < lowVal) 
            swap(arr[i++], arr[start++]); 
  
        // If current element is greater than 
        // range, put it on next available greater 
        // position. 
        else if (arr[i] > highVal) 
            swap(arr[i], arr[end--]); 
  
        else
            i++; 
    } 
} 
  

int main() 
{ 
    int arr[] = {1, 14, 5, 20, 4, 2, 54, 20, 87, 
                98, 3, 1, 32}; 
    int n = sizeof(arr)/sizeof(arr[0]); 
  
    threeWayPartition(arr, n, 10, 20); 
  
    cout << "Modified array \n"; 
    for (int i=0; i<n; i++) 
        cout << arr[i] << " "; 
} 


Question 18

#include <bits/stdc++.h>
using namespace std;
int getMinSwaps(int *arr, int n, int k) {
   int cnt = 0;
   for (int i = 0; i < n; ++i) {
      if (arr[i] <= k) {
         ++cnt;
      }
   }
   int outOfRange = 0;
   for (int i = 0; i < cnt; ++i) {
      if (arr[i] > k) {
         ++outOfRange;
      }
   }
   int result = outOfRange;
   for (int i = 0, j = cnt; j < n; ++i, ++j) {
      if (arr[i] > k) {
         --outOfRange;
      }
      if (arr[j] > k) {
         ++outOfRange;
      }
      result = min(result, outOfRange);
   }
   return result;
}
int main() {
   int arr[] = {1, 5, 4, 7, 2, 10};
   int n = sizeof(arr) / sizeof(arr[0]);
   int k = 6;
   cout << "Minimum swaps = " << getMinSwaps(arr, n, k) <<
   endl;
   return 0;
}


Question 19

#include<bits/stdc++.h> 
using namespace std; 
  
  
    bool isPalindrome(int N) 
    { 
        string str = "" + N; 
        int len = str.length(); 
        for (int i = 0; i < len / 2; i++) { 
            if (str[i] != str[len - 1 - i]) 
                return false; 
        } 
        return true; 
    } 
  
  
    bool isPalinArray(int arr[] , int n) 
    { 
        // Traversing each element of the array 
        // and check if it is palindrome or not 
        for (int i = 0; i < n; i++) { 
            bool ans = isPalindrome(arr[i]); 
            if (ans == false) 
                return false; 
        } 
        return true; 
    } 
  
    int main() 
    { 
        int arr[] = { 121, 131, 20 }; 
  
        // length of array 
        int n = sizeof(arr)/sizeof(arr[0]); 
  
        bool res = isPalinArray(arr, n); 
        if (res == true) 
            cout<<"Array is a PalinArray"; 
        else
            cout<<"Array is not a PalinArray"; 
    } 

Question 20

#include <bits/stdc++.h>
using namespace std;
 

Assumption in this function: 
Both ar1[] and ar2[] are sorted arrays */
int getMedian(int ar1[], int ar2[], int n, int m) 
{ 
    int i = 0; /* Current index of input array ar1[] */
    int j = 0; /* Current index of input array ar2[] */
    int count; 
    int m1 = -1, m2 = -1; 
 
   
    if((m + n) % 2 == 1) 
    { 
        for (count = 0; count <= (n + m)/2; count++)
        { 
            if(i != n && j != m)
            { 
                m1 = (ar1[i] > ar2[j]) ? ar2[j++] : ar1[i++]; 
            } 
            else if(i < n)
            { 
                m1 = ar1[i++]; 
            } 
            // for case when j<m, 
            else
            { 
                m1 = ar2[j++]; 
            } 
        } 
        return m1; 
    } 
     

    else
    { 
        for (count = 0; count <= (n + m)/2; count++) 
        { 
            m2 = m1; 
            if(i != n && j != m)
            { 
                m1 = (ar1[i] > ar2[j]) ? ar2[j++] : ar1[i++]; 
            } 
            else if(i < n)
            { 
                m1 = ar1[i++]; 
            } 
            // for case when j<m, 
            else
            { 
                m1 = ar2[j++]; 
            } 
        } 
        return (m1 + m2)/2; 
    } 
} 
 

int main() 
{ 
    int ar1[] = {900}; 
    int ar2[] = {5, 8, 10, 20}; 
 
    int n1 = sizeof(ar1)/sizeof(ar1[0]); 
    int n2 = sizeof(ar2)/sizeof(ar2[0]); 
    cout << getMedian(ar1, ar2, n1, n2); 
    return 0; 
} 

Question 21

#include <bits/stdc++.h>
using namespace std;
 

void printRepeating(int arr[], int size)
{
    int i;
    cout << "The repeating elements are:" << endl;
    for (i = 0; i < size; i++) {
        if (arr[abs(arr[i])] >= 0)
            arr[abs(arr[i])] = -arr[abs(arr[i])];
        else
            cout << abs(arr[i]) << " ";
    }
}
 
int main()
{
    int arr[] = { 1, 2, 3, 1, 3, 6, 6 };
    int arr_size = sizeof(arr) / sizeof(arr[0]);
    printRepeating(arr, arr_size);
    return 0;
}
